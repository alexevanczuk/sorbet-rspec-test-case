# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/site_ruby/all/site_ruby.rbi
#
# site_ruby-3.3.0

module Bundler
end
class Bundler::Worker
  def abort_threads; end
  def add_interrupt_handler; end
  def apply_func(obj, i); end
  def create_threads; end
  def deq; end
  def enq(obj); end
  def initialize(size, name, func); end
  def name; end
  def process_queue(i); end
  def remove_interrupt_handler; end
  def stop; end
  def stop_threads; end
end
class Bundler::Worker::WrappedException < StandardError
  def exception; end
  def initialize(exn); end
end
class Bundler::GemInstaller
  def failure_message; end
  def force; end
  def generate_executable_stubs; end
  def initialize(spec, installer, standalone = nil, worker = nil, force = nil, local = nil); end
  def install; end
  def install_error_message; end
  def install_from_spec; end
  def installer; end
  def local; end
  def out_of_space_message; end
  def previous_spec; end
  def spec; end
  def spec_settings; end
  def specific_failure_message(e); end
  def standalone; end
  def worker; end
end
class Bundler::ParallelInstaller
  def call; end
  def do_install(spec_install, worker_num); end
  def enqueue_specs; end
  def failed_specs; end
  def finished_installing?; end
  def handle_error; end
  def initialize(installer, all_specs, size, standalone, force, local: nil, skip: nil); end
  def install_serially; end
  def install_with_worker; end
  def process_specs; end
  def require_tree_for_spec(spec); end
  def self.call(*args, **kwargs); end
  def size; end
  def worker_pool; end
end
class Bundler::ParallelInstaller::SpecInstallation
  def all_dependencies; end
  def dependencies; end
  def dependencies_installed?(installed_specs); end
  def enqueued?; end
  def error; end
  def error=(arg0); end
  def failed?; end
  def full_name; end
  def full_name=(arg0); end
  def has_post_install_message?; end
  def ignorable_dependency?(dep); end
  def initialize(spec); end
  def installed?; end
  def name; end
  def name=(arg0); end
  def post_install_message; end
  def post_install_message=(arg0); end
  def ready_to_enqueue?; end
  def spec; end
  def spec=(arg0); end
  def state; end
  def state=(arg0); end
  def to_s; end
end
class Bundler::Standalone
  def bundler_path; end
  def define_path_helpers; end
  def extensions_dir; end
  def gem_path(path, spec); end
  def generate; end
  def initialize(groups, definition); end
  def paths; end
  def prevent_gem_activation; end
  def reverse_rubygems_kernel_mixin; end
  def version_dir; end
end
class Bundler::Installer
  def definition; end
  def ensure_specs_are_compatible!; end
  def generate_bundler_executable_stubs(spec, options = nil); end
  def generate_standalone_bundler_executable_stubs(spec, options = nil); end
  def initialize(root, definition); end
  def install(options); end
  def installation_parallelization; end
  def lock; end
  def post_install_messages; end
  def run(options); end
  def self.ambiguous_gems; end
  def self.ambiguous_gems=(arg0); end
  def self.install(root, definition, options = nil); end
end
module Bundler::Plugin
end
module Bundler::Plugin::Events
  def self.define(const, event); end
  def self.defined_event?(event); end
  def self.reset; end
end
class Bundler::Plugin::Index
  def command_plugin(command); end
  def commands; end
  def global_index_file; end
  def hook_plugins(event); end
  def index_file; end
  def initialize; end
  def installed?(name); end
  def installed_in_plugin_root?(name); end
  def installed_plugins; end
  def load_index(index_file, global = nil); end
  def load_paths(name); end
  def local_index_file; end
  def plugin_commands(plugin); end
  def plugin_path(name); end
  def register_plugin(name, path, load_paths, commands, sources, hooks); end
  def save_index; end
  def source?(source); end
  def source_plugin(name); end
  def unregister_plugin(name); end
end
class Bundler::Plugin::Index::CommandConflict < Bundler::PluginError
  def initialize(plugin, commands); end
end
class Bundler::Plugin::Index::SourceConflict < Bundler::PluginError
  def initialize(plugin, sources); end
end
